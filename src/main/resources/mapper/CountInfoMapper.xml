<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lib.dao.CountDao">
	<select id="getTodaysUpload" resultType="Long">
		SELECT count(file_id)
		FROM
		file_info
		WHERE file_create_time >= #{date1}
		and
		file_create_time <![CDATA[ <= ]]>
		#{date2}
	</select>

	<select id="getCountUserFiles" resultType="Long">
		SELECT count(file_id)
		FROM
		file_info
		WHERE file_user_id = #{userId}
	</select>

	<select id="getCountForkFiles" resultType="Long">
		select count(fork_id)
		from fork_info where doc_id in (select doc_id from doc_info where
		doc_user_id = #{userId})
	</select>

	<select id="getCountPublicFiles" resultType="Long">
		SELECT
		count(file_id)
		FROM
		file_info
		WHERE file_user_id = #{userId} or
		file_state = 5
	</select>

	<select id="getHotFiles" resultType="com.lib.dto.ClickInfo">
		select c.*, count(c.file_id)
		'fileClickTimes' ,
		f.file_uuid 'fileUUID',f.file_name 'fileName' from
		click_info c
		join
		file_info f on c.file_id = f.file_id
		GROUP BY c.file_id
		ORDER BY
		fileClickTimes DESC
		LIMIT 7;
	</select>
	<select id="getHotClasses" parameterType="java.util.Date"
		resultType="com.lib.dto.ClassesClickInfo">
		select count(file.file_id) 'uploadFileTimes',
		classification_id 'classId',classification_name 'className'
		from
		file_info file
		join classification cl on cl.classification_id =
		file.file_class_id
		where file.file_create_time >#{time}
		group by
		cl.classification_id
		ORDER BY uploadFileTimes DESC
	</select>

	<select id="getForkFileTimes" resultType="Long">
		select
		count(file.file_id)
		from file_info file
		join fork_info fo on fo.file_id
		= file.file_id
		where
		file.file_create_time >#{time}
		and
		file.file_class_id = #{classId}
	</select>

	<select id="getClickTimes" resultType="Long">
		select count(c.file_id)
		from click_info c
		join file_info f on c.file_id = f.file_id
		where
		c.click_time >#{time}
		and f.file_class_id = #{classId}
	</select>


	<select id="getActiveUsers" parameterType="java.util.Date"
		resultType="com.lib.dto.ActiveUserInfo">
		select count(file.file_id) 'uploadFileTimes', u.user_id
		'userId',u.user_name 'userName'
		from file_info file
		join user_info u on
		u.user_id = file.file_user_id
		where file.file_create_time >#{time}
		group by file.file_user_id
		ORDER BY uploadFileTimes DESC
	</select>
	<select id="getUserForkFileTimes" resultType="Long">
		select
		count(f.fork_id) from file_info file
		join fork_info f on file.file_id =
		f.file_id
		where file.file_create_time >#{time}
		and file.file_user_id =
		#{userId}
	</select>
	<select id="getUserClickTimes" resultType="Long">
		select
		count(c.click_id) from click_info c
		where c.click_time >#{time} and
		c.user_id = #{userId}
	</select>

	<select id="getUploadTimesByTime" resultType="Long">
		select
		count(file_id) from file_info
		where file_create_time between #{time1}
		and #{time2}
	</select>

	<select id="getClickTimesByTime" resultType="Long">
		select
		count(click_id) from click_info
		where click_time between #{time1} and
		#{time2}
	</select>

	<select id="getFileScoreList" resultType="com.lib.dto.FileScoreInfo">
		select user_id
		'userId', file_id 'fileId',count(file_id) 'score',click_time 'time'
		from click_info
		group by file_id
	</select>
	<insert id="insertFileScore" parameterType="com.lib.dto.FileScoreInfo">
		insert into
		file_score (user_id, file_id,
		score,time)
		values(#{userId},#{fileId},#{score},#{time})
	</insert>
		<select id="queryFileScoreByUserAndFile" resultType="com.lib.dto.FileScoreInfo">
		select * from file_score
		where user_id = #{userId} and file_id = #{fileId}
	</select>
		<update id="updateFileScore" parameterType="com.lib.dto.FileScoreInfo">
		update file_score
		set score = #{score},time = #{time}
		where user_id = #{userId} and file_id = #{fileId}
	</update>
</mapper>